import org.optaplanner.core.api.score.Score;
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import de.jensk.optaPlannerHsOsna.*

global HardSoftScoreHolder scoreHolder;


//HARD CONSTRAINTS

//Ensures that only one event can be take place in a room at a time
rule "oneEventPerRoom"
    when
        Event($leftRoomId : roomId, $leftDay : day, $leftTimeSlot : timeSlot, $leftUniqueId : uniqueId)
        Event(roomId == $leftRoomId, day == $leftDay, timeSlot == $leftTimeSlot, $leftUniqueId > uniqueId)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//Ensures that a teacher only has one event at a time
rule "oneEventPerTeacher"
    when
        $leftEvent : Event(day != null, timeSlot != null, $leftDay : day, $leftTimeSlot: timeSlot, $leftUniqueId : uniqueId)
        $leftTeacher : Integer() from $leftEvent.teacherIds
        $rightEvent : Event(day != null, timeSlot != null, $leftDay == day, $leftTimeSlot == timeSlot, $leftUniqueId > uniqueId)
        $rightTeacher: Integer(equals($leftTeacher) == true) from $rightEvent.teacherIds
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//Ensures that no event is in a timeslot that is locked by the teacher
rule "avoidLockedTimeSlots"
    when
        $event : Event(day != null, timeSlot != null, $day : getDay(), $timeSlot: timeSlot)
        $teacherId : Integer() from $event.teacherIds
        TimePreferenceMap(getPreference($teacherId, $day, $timeSlot) == 1)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//ensures that a group of students only has to attend one event at a time
rule "oneEventPerGroup"
    when
    Event(day != null, timeSlot != null, $leftDay : day, $leftTimeSlot : timeSlot, $leftStudyGroups : getStudyGroups(), $leftGroupUniqueId : uniqueId)
    StudyGroup($leftGroupSpecialCatId : specialCatId, $leftGroupCohortId: cohortId, $leftGroupSpecialId : specialId) from $leftStudyGroups
    Event(day != null, timeSlot != null, $leftDay == day, $leftTimeSlot == timeSlot, $leftGroupUniqueId > uniqueId, $rightStudyGroups : getStudyGroups())
    StudyGroup($leftGroupCohortId == cohortId, $leftGroupSpecialCatId != specialCatId || $leftGroupSpecialId == specialId) from $rightStudyGroups
    then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//SOFT CONSTRAINTS

//Rewards events in a timeslot that is wished for by the teacher
rule "rewardPreferredTimeSlots"
    when
        $event : Event(day != null, timeSlot != null, $day : getDay(), $timeSlot: timeSlot)
        $teacherId : Integer() from $event.teacherIds
        TimePreferenceMap(getPreference($teacherId, $day, $timeSlot) == 3)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, 1);
end

//punishes events which a higher group size than room capacity
rule "avoidTooSmallRooms"
    when
        Event(roomId != null, groupSize != null, $roomId : roomId, $groupSize : groupSize)
        RoomMap(getCapacity($roomId) < $groupSize);
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -20);
end


//todo: wurde verändert. ist in der in der arbeit selber noch nicht angepasst worden
rule "punishSameEventDifferentRoom"
    when
        Event(roomId != null, id != null, $leftRoomId : roomId, $leftId : id, $leftUniqueId :uniqueId)
        Event(roomId != null, id != null, $leftRoomId != roomId, $leftId == id, $leftUniqueId > uniqueId)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -3);
end

rule "placeHardEventsEarly"
    when
        Event(timeSlot != null, hard != null, hard == true, $timeSlot : timeSlot)
    then
    scoreHolder.addSoftConstraintMatch(kcontext, -$timeSlot);
end


//punishes if a group of students has to change the buildig from one timeslot to the next
rule "punishBuildingChangeWithoutBreak"
    when
        Event(day != null, timeSlot != null, $leftDay : day, $leftTimeSlot : timeSlot, $leftStudyGroups : getStudyGroups(), $leftRoomId : roomId )
        Event(day != null, timeSlot != null, $leftDay == day, $leftTimeSlot == timeSlot + 1, $rightStudyGroups : getStudyGroups(), $rightRoomId : roomId )
        RoomMap(areRoomsInDifferentBuildings($leftRoomId, $rightRoomId) == true)
        $leftStudyGroup : StudyGroup() from $leftStudyGroups
        $rightStudyGroup : StudyGroup($leftStudyGroup.cohortId == cohortId, $leftStudyGroup.specialCatId != specialCatId || $leftStudyGroup.specialId == specialId) from $rightStudyGroups
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -5);
end

//todo: wurde verändert. ist in der in der arbeit selber noch nicht angepasst worden
rule "punishMissingRoomFeatures"
    when
        Event(roomId != null, featureIds != null, $roomId : roomId, $wantedFeatures: featureIds)
        $wantedFeatureId : Integer () from $wantedFeatures;
        RoomMap(doesRoomHaveFeature($roomId, $wantedFeatureId) == false)
    then
     scoreHolder.addSoftConstraintMatch(kcontext, -10);
end




rule "1HPM1"
    when
        Event(hpm == 1, day != null, timeSlot != null, $leftDay : day, $timeSlot1: timeSlot, $leftId : id, $unique1 : uniqueId)
        Event(day != null, timeSlot != null, $leftId == id, $leftDay == day)
    then
    scoreHolder.addSoftConstraintMatch(kcontext, -10);
end


rule "2HPM1"
    when
        Event(hpm == 2, day != null, timeSlot != null, $leftDay : day, $timeSlot1: timeSlot, $leftId : id, $unique1 : uniqueId)
        Event(day != null, timeSlot != null, $leftId == id, $leftDay == day, $timeSlot1 == timeSlot + 1  || $timeSlot1 == timeSlot - 1)
    then
    scoreHolder.addSoftConstraintMatch(kcontext, 5);
end

rule "2HPM2"
    when
        Event(hpm == 2, day != null, timeSlot != null, $leftDay : day, $timeSlot1: timeSlot, $leftId : id, $unique1 : uniqueId)
        Event(day != null, timeSlot != null, $leftId == id, $leftDay == day, $timeSlot1 == timeSlot + 1  || $timeSlot1 == timeSlot - 1)
        Event(day != null, timeSlot != null, $leftId == id, $leftDay == day, $timeSlot1 == timeSlot + 2  || $timeSlot1 == timeSlot - 2)
    then
    scoreHolder.addSoftConstraintMatch(kcontext, -5);
end

rule "2HPM3"
    when
        Event(hpm == 2, day != null, timeSlot != null, $leftDay : day, $timeSlot1: timeSlot, $leftId : id, $unique1 : uniqueId)
        Event(day != null, timeSlot != null, $leftId == id, $leftDay == day, $timeSlot1 >= timeSlot + 2 )
    then
    scoreHolder.addSoftConstraintMatch(kcontext, -10);
end


/*

rule "noGapsForStudents1"
    when
         $event1 : Event(day != null, timeSlot != null, $day1 : day, $timeSlot1 : timeSlot, $unique1 : uniqueId)
         $event2 : Event(uniqueId != $unique1, day != null, timeSlot != null, $day2 : day, $timeSlot2 : timeSlot, $unique2 : uniqueId, $day1 != day || !($timeSlot1 + 1 == timeSlot))
         $event3 : Event(uniqueId != $unique2, day != null, timeSlot != null, $day3 : day, $timeSlot3 : timeSlot, $unique3 : uniqueId, $day1 == day, $timeSlot1 + 2 == timeSlot)
         CustomScoreMethodHolder(checkForCommonGroup($event1, $event2, $event3))
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -2);
end

rule "noGapsForStudents2"
    when

         $event1 : Event(day != null, timeSlot != null, $day1 : day, $timeSlot1 : timeSlot, $unique1 : uniqueId)
         $event2 : Event(uniqueId != $unique1, day != null, timeSlot != null, $day2 : day, $timeSlot2 : timeSlot, $unique2 : uniqueId, $day1 != day || !($timeSlot1 + 1 == timeSlot || $timeSlot1 + 2 == timeSlot))
         $event3 : Event(uniqueId != $unique1, uniqueId != $unique2, day != null, timeSlot != null, $day3 : day, $timeSlot3 : timeSlot, $unique3 : uniqueId, $day1 != day || !($timeSlot1 + 1 == timeSlot || $timeSlot1 + 2 == timeSlot))
         $event4 : Event(uniqueId != $unique2, uniqueId != $unique3, day != null, timeSlot != null, $day4 : day, $timeSlot4 : timeSlot, $unique4 : uniqueId, $day1 == day, $timeSlot1 + 3 == timeSlot)
         $calc: CustomScoreMethodHolder()
    then
        scoreHolder.addSoftConstraintMatch(kcontext, ($calc.checkForCommonGroup($event1,$event2,$event4)?-10:0) +
                                                     ($calc.checkForCommonGroup($event1,$event3,$event4)?-10:0));
end


rule "noGapsForStudents3"
    when

         $event1 : Event(day != null, timeSlot != null, $day1 : day, $timeSlot1 : timeSlot, $unique1 : uniqueId)
         $event2 : Event(uniqueId != $unique1, day != null, timeSlot != null, $day2 : day, $timeSlot2 : timeSlot, $unique2 : uniqueId, $day1 != day || !($timeSlot1 + 1 == timeSlot || $timeSlot1 + 2 == timeSlot|| $timeSlot1 + 3 == timeSlot))
         $event3 : Event(uniqueId != $unique1, uniqueId != $unique2,  day != null, timeSlot != null, $day3 : day, $timeSlot3 : timeSlot, $unique3 : uniqueId, $day1 != day || !($timeSlot1 + 1 == timeSlot || $timeSlot1 + 2 == timeSlot || $timeSlot1 + 3 == timeSlot))
         $event4 : Event(uniqueId != $unique1, uniqueId != $unique2, uniqueId != $unique3, day != null, timeSlot != null, $day4 : day, $timeSlot4 : timeSlot, $unique4 : uniqueId, $day1 != day || !($timeSlot1 + 1 == timeSlot || $timeSlot1 + 2 == timeSlot || $timeSlot1 + 3 == timeSlot))
         $event5 : Event(uniqueId != $unique2, uniqueId != $unique3, uniqueId != $unique4 , day != null, timeSlot != null, $day5 : day, $timeSlot5 : timeSlot, $unique5 : uniqueId, $day1 == day, $timeSlot1 + 4 == timeSlot)
         $calc: CustomScoreMethodHolder()
    then
        scoreHolder.addSoftConstraintMatch(kcontext, ($calc.checkForCommonGroup($event1,$event2,$event5)?-5:0) +
                                                     ($calc.checkForCommonGroup($event1,$event3,$event5)?-5:0) +
                                                     ($calc.checkForCommonGroup($event1,$event4,$event5)?-5:0));
end

rule "notFirstAndLastForStudents"
    when
        Event(day != null, timeSlot != null, $day1 : day, unique1 : uniqueId, timeSlot == 0, $groups1 : getStudyGroups())
        Event(day != null, timeSlot != null, day == $day1, timeSlot == 5, uniqueId != unique1, $groups2 : getStudyGroups())
        $group1 : StudyGroup($cohort1 : cohortId, $specialcat1 : specialCatId, $special1 : specialId) from $groups1
        StudyGroup((cohortId == $cohort1 && specialCatId != $specialcat1) || specialId == $special1) from $groups2
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -20);
end

*/

