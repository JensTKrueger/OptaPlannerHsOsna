import org.optaplanner.core.api.score.Score;
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import de.jensk.optaPlannerHsOsna.*
import java.util.ArrayList;


global HardSoftScoreHolder scoreHolder;


//HARD CONSTRAINTS

//Ensures that only one event can be take place in a room at a time
rule "oneEventPerRoom"
    when
        Event($leftRoomId : roomId, $leftDay : day, $leftTimeSlot : timeSlot, $leftUniqueId : uniqueId)
        Event(roomId == $leftRoomId, day == $leftDay, timeSlot == $leftTimeSlot, $leftUniqueId > uniqueId)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//Ensures that a teacher only has one event at a time
rule "oneEventPerTeacher"
    when
        $leftEvent : Event(day != null, timeSlot != null, $leftDay : day, $leftTimeSlot: timeSlot, $leftUniqueId : uniqueId)
        $leftTeacher : Integer() from $leftEvent.teacherIds
        $rightEvent : Event(day != null, timeSlot != null, $leftDay == day, $leftTimeSlot == timeSlot, $leftUniqueId > uniqueId)
        $rightTeacher: Integer(equals($leftTeacher) == true) from $rightEvent.teacherIds
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//Ensures that no event is in a timeslot that is locked by the teacher
rule "avoidLockedTimeSlots"
    when
        $event : Event(day != null, timeSlot != null, $day : getDay(), $timeSlot: timeSlot)
        $teacherId : Integer() from $event.teacherIds
        TimePreferenceMap(getPreference($teacherId, $day, $timeSlot) == 1)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//ensures that a group of students only has to attend one event at a time
rule "oneEventPerGroup"
    when
    Event(day != null, timeSlot != null, $leftDay : day, $leftTimeSlot : timeSlot, $leftStudyGroups : getStudyGroups(), $leftGroupUniqueId : uniqueId)
    StudyGroup($leftGroupSpecialCatId : specialCatId, $leftGroupCohortId: cohortId, $leftGroupSpecialId : specialId) from $leftStudyGroups
    Event(day != null, timeSlot != null, $leftDay == day, $leftTimeSlot == timeSlot, $leftGroupUniqueId > uniqueId, $rightStudyGroups : getStudyGroups())
    StudyGroup($leftGroupCohortId == cohortId, $leftGroupSpecialCatId != specialCatId || $leftGroupSpecialId == specialId) from $rightStudyGroups
    then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//SOFT CONSTRAINTS

//Rewards events in a timeslot that is wished for by the teacher
rule "rewardPreferredTimeSlots"
    when
        $event : Event(day != null, timeSlot != null, $day : getDay(), $timeSlot: timeSlot)
        $teacherId : Integer() from $event.teacherIds
        TimePreferenceMap(getPreference($teacherId, $day, $timeSlot) == 3)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, 1);
end

//punishes events which a higher group size than room capacity
rule "avoidTooSmallRooms"
    when
        Event(roomId != null, groupSize != null, $roomId : roomId, $groupSize : groupSize)
        RoomMap(getCapacity($roomId) < $groupSize);
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -20);
end


//todo: wurde verändert. ist in der in der arbeit selber noch nicht angepasst worden
rule "punishSameEventDifferentRoom"
    when
        Event(roomId != null, id != null, $leftRoomId : roomId, $leftId : id, $leftUniqueId :uniqueId)
        Event(roomId != null, id != null, $leftRoomId != roomId, $leftId == id, $leftUniqueId > uniqueId)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -1);
end

rule "placeHardEventsEarly"
    when
        Event(timeSlot != null, hard != null, hard == true, $timeSlot : timeSlot)
    then
    scoreHolder.addSoftConstraintMatch(kcontext, -$timeSlot);
    System.out.println("HARD FIRED");
end


//punishes if a group of students has to change the buildig from one timeslot to the next
//todo: wurde verändert. ist in der in der arbeit selber noch nicht angepasst worden
rule "punishBuildingChangeWithoutBreak"
    when
        Event(roomId != null, day != null, timeSlot != null, $leftDay : day, $leftTimeSlot : timeSlot, $leftStudyGroups : getStudyGroups(), $leftRoomId : roomId )
        Event(roomId != null, day != null, timeSlot != null, $leftDay == day, $leftTimeSlot == timeSlot + 1, $rightStudyGroups : getStudyGroups(), $rightRoomId : roomId )
        RoomMap(areRoomsInDifferentBuildings($leftRoomId, $rightRoomId) == true)
        $leftStudyGroup : StudyGroup() from $leftStudyGroups
        $rightStudyGroup : StudyGroup($leftStudyGroup.cohortId == cohortId, $leftStudyGroup.specialCatId != specialCatId || $leftStudyGroup.specialId == specialId) from $rightStudyGroups
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -5);
end

//todo: wurde verändert. ist in der in der arbeit selber noch nicht angepasst worden
rule "punishMissingRoomFeatures"
    when
        Event(roomId != null, featureIds != null, $roomId : roomId, $wantedFeatures: featureIds)
        $wantedFeatureId : Integer () from $wantedFeatures;
        RoomMap(doesRoomHaveFeature($roomId, $wantedFeatureId) == false)
    then
     scoreHolder.addSoftConstraintMatch(kcontext, -10);
end




rule "2HPM1"
    when
        Event(hpm == 2, day != null, timeSlot != null, $leftDay : day, $timeSlot1: timeSlot, $leftId : id, $unique1 : uniqueId)
        Event(hpm == 2, day != null, timeSlot != null, $leftDay == day, $timeSlot1 > 1 + timeSlot, $leftId == id)
    then
    scoreHolder.addSoftConstraintMatch(kcontext, -50);
end


rule "2HPM"
    when
        Event(hpm == 2, day != null, timeSlot != null, $leftDay : day, $timeSlot1: timeSlot, $leftId : id, $unique1 : uniqueId)
        ArrayList(size != 2 , $size : size())
            from collect (Event(day != null, timeSlot != null, $leftDay == day, $leftId == id))
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -100 * Math.abs( 2 - $size));
end

/*


rule "2HPM1"
    when
        Event(hpm == 2, day != null, timeSlot != null, $leftDay : day, $timeSlot1: timeSlot, $leftId : id, $unique1 : uniqueId)
        Event(day != null, timeSlot != null, $leftId == id, $leftDay == day, $timeSlot1 == timeSlot + 1  || $timeSlot1 == timeSlot - 1)
    then
    scoreHolder.addSoftConstraintMatch(kcontext, 20);
end


rule "2HPM3"
    when
        Event(hpm == 2, day != null, timeSlot != null, $leftDay : day, $timeSlot1: timeSlot, $leftId : id, $unique1 : uniqueId)
        Event(day != null, timeSlot != null, $leftId == id, $leftDay == day, $timeSlot1 >= timeSlot + 2 )
    then
    scoreHolder.addSoftConstraintMatch(kcontext, -10);
end
*/

/*
rule "2HPM"
    when
    $event1 : Event(day != null, timeSlot != null, $day1 : day, $timeSlot1: timeSlot, $uniqueId1 : uniqueId, $id1 : id)
    then

end
*/


rule "noGaps"
    when
        $event1 : Event(day != null, timeSlot != null, $day1 : day, $timeSlot1: timeSlot, $uniqueId1 : uniqueId, $groupList1 : getStudyGroups())
        $event2 : Event(day != null, timeSlot != null, $day1 == day, $timeSlot1 + 1 < timeSlot , $timeSlot2 : timeSlot, $groupList2 : getStudyGroups())
        $event3 : Event(day != null, timeSlot != null, day == $day1, timeSlot > $timeSlot1, timeSlot < $timeSlot2, $groupList3 : getStudyGroups())
        $group1 : StudyGroup() from $groupList1
        $group2 : StudyGroup(cohortId == $group1.cohortId, specialCatId == $group1.specialCatId, specialId == $group1.specialId) from $groupList2
        $filledHoursList : ArrayList(size < $timeSlot2 - $timeSlot1 - 1)
            from collect (StudyGroup(cohortId == $group1.cohortId, specialCatId == $group1.specialCatId, specialId == $group1.specialId) from $groupList3)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -10 * ($timeSlot2-$timeSlot1-1-$filledHoursList.size()));
end


